meta:
  plan:
    terraform-bootstrap:
      task: terraform-bootstrap
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: dwpdigital/jinja-yaml-aws
            version: 0.0.19
            tag: 0.0.19
        run:
          path: sh
          args:
            - -exc
            - |
              python ./example/bootstrap_terraform.py
              cp ./example/terraform.tfvars ../terraform-config
              cp ./example/terraform.tf ../terraform-config
          dir: terraform-aws-dataworks-htme
        inputs:
          - name: terraform-aws-dataworks-htme
        outputs:
          - name: terraform-aws-dataworks-htme
          - name: terraform-config
      params:
        AWS_REGION: eu-west-2

    terraform-common-config:
      config:
        platform: linux
        image_resource:
          type: registry-image
          source:
            repository: dwpdigital/all-terra-tools-docker
        params:
          TF_INPUT: false
          AWS_REGION: ((dataworks.aws_region))
          TF_CLI_ARGS_apply: -lock-timeout=300s
          TF_CLI_ARGS_plan: -lock-timeout=300s
          TF_VAR_slack_webhook_url: ((dataworks.slack_webhook_url))

    pre-checks:
      task: pre-checks
      .: (( inject meta.plan.terraform-common-config ))
      config:
        run:
          path: sh
          args:
          - -exc
          - |
            pre-commit install
            pre-commit run --all-files
          dir: terraform-aws-dataworks-htme
        inputs:
          - name: terraform-aws-dataworks-htme

    linting-shell:
      task: linting-shell
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: koalaman/shellcheck-alpine
            tag: latest
        run:
          path: sh
          args:
            - -exc
            - |
              find . -name "*.sh" | cat >> shell-list
              # Ignore SC2154 as it will fail all terraform vars that are passed to scripts
              # Ignore SC1091 due to sourcing of files that aren't in the same path locally so shellcheck will fail, but these files are on the boxes
              for i in $(cat shell-list); do shellcheck -e SC2154 -e SC1091 $i; done
          dir: terraform-aws-dataworks-htme
        inputs:
          - name: terraform-aws-dataworks-htme

    terraform-terratest:
      task: terraform-terratest
      .: (( inject meta.plan.terraform-common-config ))
      config:
        run:
          path: sh
          args:
          - -exc
          - |
            export TF_VAR_al2_hardened_ami_id=$(cat ../dw-al2-hardened-ami/id)
            export TF_VAR_htme_version=$(cat ../artefacts/htme-release/version)
            cp ../terraform-config/terraform.tfvars ./example
            cp ../terraform-config/terraform.tf ./example
            go mod init htme
            go mod tidy
            cd tests/terratest
            go test -v -timeout 30m htme_test.go
          dir: terraform-aws-dataworks-htme
        inputs:
          - name: terraform-aws-dataworks-htme
          - name: terraform-config
          - name: dw-al2-hardened-ami
          - name: artefacts

    notify:
      on_success:
        put: slack
        attempts: 1
        params:
          channel: "#dataworks-concourse-notifications"
          icon_emoji: ":concourse-green:"
          attachments:
            - color: "#27bd06"
              text: |
                The <https://ci.dataworks.dwp.gov.uk/builds/$BUILD_ID|$BUILD_JOB_NAME> stage for <https://ci.dataworks.dwp.gov.uk/teams/dataworks/pipelines/$BUILD_PIPELINE_NAME|*$BUILD_PIPELINE_NAME*> has completed successfully.
              attachment_type: "default"
      on_failure:
        put: slack
        attempts: 1
        params:
          channel: "#dataworks-concourse-notifications"
          icon_emoji: ":concourse-red:"
          attachments:
            - color: "#ed0707"
              text: |
                The <https://ci.dataworks.dwp.gov.uk/builds/$BUILD_ID|$BUILD_JOB_NAME> stage for <https://ci.dataworks.dwp.gov.uk/teams/dataworks/pipelines/$BUILD_PIPELINE_NAME|*$BUILD_PIPELINE_NAME*> has failed.
              attachment_type: "default"
      on_error:
        put: slack
        attempts: 1
        params:
          channel: "#dataworks-concourse-notifications"
          icon_emoji: ":concourse-red:"
          attachments:
            - color: "#eff702"
              text: |
                The <https://ci.dataworks.dwp.gov.uk/builds/$BUILD_ID|$BUILD_JOB_NAME> stage for <https://ci.dataworks.dwp.gov.uk/teams/dataworks/pipelines/$BUILD_PIPELINE_NAME|*$BUILD_PIPELINE_NAME*> has errored.
              attachment_type: "default"
      on_abort:
        put: slack
        attempts: 1
        params:
          channel: "#dataworks-concourse-notifications"
          icon_emoji: ":concourse:"
          attachments:
            - color: "#472102"
              text: |
                The <https://ci.dataworks.dwp.gov.uk/builds/$BUILD_ID|$BUILD_JOB_NAME> stage for <https://ci.dataworks.dwp.gov.uk/teams/dataworks/pipelines/$BUILD_PIPELINE_NAME|*$BUILD_PIPELINE_NAME*> has been aborted.
              attachment_type: "default"

    terraform-output-management:
      task: terraform-output-management
      .: (( inject meta.plan.terraform-common-config ))
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.terraform_repository))
            version: ((dataworks.terraform_version))
            tag: ((dataworks.terraform_version))
        params:
          TF_WORKSPACE: management
        run:
          path: sh
          dir: aws-management-infrastructure
          args:
            - -exc
            - |
              terraform init
              terraform workspace show
              terraform output --json > ../terraform-output-management/outputs.json
        inputs:
          - name: aws-management-infrastructure
        outputs:
          - name: terraform-output-management

    get-artefacts:
      task: get-artefacts
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_awscli_repository))
            version: ((dataworks.docker_awscli_version))
            tag: ((dataworks.docker_awscli_version))
        params:
          AWS_DEFAULT_REGION: ((dataworks.aws_region))
        inputs:
          - name: terraform-output-management
        run:
          path: sh
          args:
            - -exc
            - |
              export AWS_DEFAULT_REGION
              source /assume-role
              set +x
              ARTEFACT_BUCKET=`cat terraform-output-management/outputs.json | jq -r ".artefact_bucket.value.id"`
              LATEST_ARTEFACT=`aws s3 ls s3://${ARTEFACT_BUCKET}/hbase-to-mongo-export/gitlabci/ | sort | tail -n 1 | awk '{print $4}')`
              echo $LATEST_ARTEFACT
              aws s3 cp s3://${ARTEFACT_BUCKET}/hbase-to-mongo-export/gitlabci/$LATEST_ARTEFACT ./artefacts/htme-release/$LATEST_ARTEFACT
              echo $(ls ./artefacts/htme-release/*.jar | sed -e 's/^.*export-//' -e 's/.jar$//') > ./artefacts/htme-release/version
        outputs:
          - name: artefacts
